install.packages("ROAuth");
install.packages("base64enc");
install.packages("twitteR");
install.packages("streamR");
knitr::opts_chunk$set(echo = TRUE)
library("ROAuth")
library("ROAuth")
library("base64enc");
library("twitteR");
library("streamR");
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
options(httr_oauth_cache=T)
library("ROAuth")
library("base64enc");
library("twitteR");
library("streamR");
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
options(httr_oauth_cache=T)
consumer_key <- "qsfEl1rZ5vnUyrjPJ2gjXi1Ti"
consumer_secret <-"CXNmHS3MFFeWpcWxtvNxIqr5jDq4JYDycKQJ4BQcVuPTihDajG"
access_token <-"251749544-cWJBRGiFAP21MlghpoQN8FEOQlaH2itCfSzSCzCE"
access_secret <-"0vmLaihQ2fCrOulWEnyFJuKnHzYLhUBhWn2jY4oHOxc9c"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
credentials_file <- "my_oauth.Rdata"
if (file.exists(credentials_file)){
load(credentials_file)
} else {
cred <- OAuthFactory$new(consumerKey = consumer_key, consumerSecret =
consumer_secret, requestURL = reqURL, accessURL = accessURL, authURL = authURL)
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(cred, file = credentials_file)
}
library(twitteR);
source('credenciales.R')
source('credenciales.R')
tweets <- searchTwitter("love", n=10, lang="es")
tweet <- tweets[[1]];
str(tweet)
tweet$getText()
usuario <- getUser(tweet$getScreenName());
str(usuario)
usuario$getName()
tweets <- searchTwitter("vida", n=10, lang="es")
tweet <- tweets[[1]];
str(tweet)
tweet$getText()
usuario <- getUser(tweet$getScreenName());
str(usuario)
usuario$getName()
tweets <- searchTwitter("@Zuhe18", n=10, lang="es")
tweet <- tweets[[1]];
tweets <- searchTwitter("@zuhe18", n=10, lang="es")
tweet <- tweets[[1]];
tweets <- searchTwitter("@PacoPollos", n=10, lang="es")
tweets <- searchTwitter("@PacoPollos", n=10, lang="es")
library(twitteR);
source('credenciales.R')
tweets <- searchTwitter("@PacoPollos", n=10, lang="es")
tweets <- searchTwitter("@LauraRequenaLeo", n=10, lang="es")
tweet <- tweets[[1]];
tweets <- searchTwitter("@_FrasesEstopa_", n=10, lang="es")
tweet <- tweets[[1]];
str(tweet)
tweet$getText()
tweets <- searchTwitter("#myhyv", n=10, lang="es")
tweet <- tweets[[1]];
str(tweet)
tweet$getText()
tweets <- searchTwitter("#myhyv", n=1000, lang="es")
tweet <- tweets[[1]];
str(tweet)
tweet$getText()
tweets <- searchTwitter("@PacoPollos", n=1000, lang="es")
source('credenciales.R')
tweets <- searchTwitter("@PacoPollos", n=1000, lang="es")
if (!require('pacman')) install.packages('pacman&')
pacman::p_load(devtools, installr)
install.packages("pacman")
pacman::p_load(devtools, installr)
install.Rtools()
install.packages("instaR")
pacman::p_load(devtools, installr)
install.Rtools()
library(pacman)
install.Rtools()
install.packages("Rtools")
pacman::p_load(devtools, installr)
if (!require('pacman')) install.packages('pacman&')
if (!require('pacman')) install.packages('pacman&')
pacman::p_load(devtools, installr)
install.packages("~/Downloads/Rstem_0.4-1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/sentiment_0.2.tar.gz", repos = NULL, type = "source")
install.Rtools()
install_url('http://cran.r-project.org/src/contrib/Archive/Rstem/Rstem_0.4-1.tar.gz')
install_url('http://cran.r-project.org/src/contrib/Archive/sentiment/sentiment_0.2.tar.gz')
if (!require('pacman')) install.packages('pacman')
pacman::p_load(twitteR, sentiment, plyr, ggplot2, wordcloud, RColorBrewer, httpuv, RCurl, base64enc)
pacman::p_load(twitteR, sentiment, plyr, ggplot2, wordcloud, RColorBrewer, httpuv, RCurl, base64enc)
options(RCurlOptions = list(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl')))
api_key = 'xxx'
api_secret = 'xxx'
access_token = 'xxx'
access_token_secret = 'xxx'
api_key <- "qsfEl1rZ5vnUyrjPJ2gjXi1Ti"
api_secret <-"CXNmHS3MFFeWpcWxtvNxIqr5jDq4JYDycKQJ4BQcVuPTihDajG"
access_token <-"251749544-cWJBRGiFAP21MlghpoQN8FEOQlaH2itCfSzSCzCE"
access_token_secret <-"0vmLaihQ2fCrOulWEnyFJuKnHzYLhUBhWn2jY4oHOxc9c"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
setup_twitter_oauth(api_key,api_secret)
some_tweets = searchTwitter('starbucks', n=10000, lang='en')
some_txt = sapply(some_tweets, function(x) x$getText())
some_txt = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', some_txt)
some_txt = gsub('@\\w+', '', some_txt)
some_txt = gsub('[[:punct:]]', '', some_txt)
some_txt = gsub('[[:digit:]]', '', some_txt)
some_txt = gsub('http\\w+', '', some_txt)
some_txt = gsub('[ \t]{2,}', '', some_txt)
some_txt = gsub('^\\s+|\\s+$', '', some_txt)
try.error = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, 'error'))
y = tolower(x)
# result
return(y)
}
some_txt = sapply(some_txt, try.error)
some_txt = some_txt[!is.na(some_txt)]
names(some_txt) = NULL
class_emo = classify_emotion(some_txt, algorithm='bayes', prior=1.0)
emotion = class_emo[,7]
emotion[is.na(emotion)] = 'unknown'
class_pol = classify_polarity(some_txt, algorithm='bayes')
polarity = class_pol[,4]
sent_df = data.frame(text=some_txt, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets about Starbucks\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette='RdGy') +
labs(x='polarity categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets about Starbucks\n(classification by polarity)') +
theme(plot.title = element_text(size=12, face='bold'))
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep('', nemo)
for (i in 1:nemo)
{
tmp = some_txt[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=' ')
}
emo.docs = removeWords(emo.docs, stopwords('english'))
corpus = Corpus(VectorSource(emo.docs))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = emos
comparison.cloud(tdm, colors = brewer.pal(nemo, 'Dark2'),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
setwd("~/Dropbox/zMaster/zRStudio/SistemasDeRecuperacionDeInformacionYRecomendacion")
ls
ls()
pwd
knitr::opts_chunk$set(echo = TRUE)
library(twitteR);
source('../credenciales.R')
library(twitteR);
source('../credenciales.R')
tweets <- searchTwitter("@PacoPollos", n=1000, lang="es")
tweets <- searchTwitter("#brexit", n=1000, lang="es")
tweets <- searchTwitter("#brexit", n=100, lang="en")
tweet <- tweets[[1]];
str(tweet)
tweet$getText()
usuario <- getUser(tweet$getScreenName());
str(usuario)
usuario$getName()
source('../credenciales.R')
knitr::opts_chunk$set(echo = TRUE)
some_tweets = searchTwitter('starbucks', n=10000, lang='en')
some_tweets = searchTwitter('starbucks', n=100, lang='en')
some_txt = sapply(some_tweets, function(x) x$getText())
tweets <- searchTwitter("#brexit", n=100, lang="en")
texto_tweets = sapply(tweets, function(x) x$getText())
head(texto_tweets)
# eliminamos retweet
texto_tweets = ('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
tweets <- searchTwitter("#brexit", n=100, lang="en")
texto_tweets = sapply(tweets, function(x) x$getText())
texto_tweets
head(texto_tweets)
texto_tweets = ('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
some_tweets = searchTwitter('starbucks', n=100, lang='en')
some_txt = sapply(some_tweets, function(x) x$getText())
some_txt = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', some_txt)
texto_tweets = ('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
texto_tweets = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
head(texto_tweets)
head(texto_tweets)
# eliminamos retweet
texto_tweets = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
head(texto_tweets)
# eliminar usuarios
texto_tweets = gsub('@\\w+', '', texto_tweets)
head(texto_tweets)
# eliminamos puntuación
texto_tweets = gsub('[[:punct:]]', '', texto_tweets)
head(texto_tweets)
# eliminamos números
texto_tweets = gsub('[[:digit:]]', '', texto_tweets)
head(texto_tweets)
# eliminamos enlaces html
texto_tweets = gsub('http\\w+', '', texto_tweets)
head(texto_tweets)
# eliminamos espacios innecesarios
texto_tweets = gsub('[ \t]{2,}', '', texto_tweets)
texto_tweets = gsub('^\\s+|\\s+$', '', texto_tweets)
head(texto_tweets)
print(eliminamos retweet)
print("eliminamos retweet")
head(texto_tweets)
print("eliminamos retweet\n")
texto_tweets = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
head(texto_tweets)
print("eliminar usuarios\n")
texto_tweets = gsub('@\\w+', '', texto_tweets)
head(texto_tweets)
print("eliminamos puntuación\n")
texto_tweets = gsub('[[:punct:]]', '', texto_tweets)
head(texto_tweets)
print("eliminamos números\n")
texto_tweets = gsub('[[:digit:]]', '', texto_tweets)
head(texto_tweets)
print("eliminamos enlaces html\n")
texto_tweets = gsub('http\\w+', '', texto_tweets)
head(texto_tweets)
print("eliminamos espacios innecesarios\n")
texto_tweets = gsub('[ \t]{2,}', '', texto_tweets)
texto_tweets = gsub('^\\s+|\\s+$', '', texto_tweets)
head(texto_tweets)
echo("eliminamos retweet\n")
cat("eliminamos retweet\n")
head(texto_tweets)
cat("eliminamos retweet\n")
texto_tweets = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
head(texto_tweets)
cat("eliminar usuarios\n")
texto_tweets = gsub('@\\w+', '', texto_tweets)
head(texto_tweets)
cat("eliminamos puntuación\n")
texto_tweets = gsub('[[:punct:]]', '', texto_tweets)
head(texto_tweets)
cat("eliminamos números\n")
texto_tweets = gsub('[[:digit:]]', '', texto_tweets)
head(texto_tweets)
cat("eliminamos enlaces html\n")
texto_tweets = gsub('http\\w+', '', texto_tweets)
head(texto_tweets)
cat("eliminamos espacios innecesarios\n")
texto_tweets = gsub('[ \t]{2,}', '', texto_tweets)
texto_tweets = gsub('^\\s+|\\s+$', '', texto_tweets)
head(texto_tweets)
head(texto_tweets)
cat("Eliminamos retweet\n")
texto_tweets = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
head(texto_tweets)
cat("Eliminar usuarios\n")
texto_tweets = gsub('@\\w+', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos puntuación\n")
texto_tweets = gsub('[[:punct:]]', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos números\n")
texto_tweets = gsub('[[:digit:]]', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos enlaces html\n")
texto_tweets = gsub('http\\w+', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos espacios innecesarios\n")
texto_tweets = gsub('[ \t]{2,}', '', texto_tweets)
texto_tweets = gsub('^\\s+|\\s+$', '', texto_tweets)
head(texto_tweets)
head(texto_tweets)
cat("Eliminamos retweet\n\n")
texto_tweets = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
head(texto_tweets)
cat("Eliminar usuarios\n\n")
texto_tweets = gsub('@\\w+', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos puntuación\n\n")
texto_tweets = gsub('[[:punct:]]', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos números\n\n")
texto_tweets = gsub('[[:digit:]]', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos enlaces html\n\n")
texto_tweets = gsub('http\\w+', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos espacios innecesarios\n\n")
texto_tweets = gsub('[ \t]{2,}', '', texto_tweets)
texto_tweets = gsub('^\\s+|\\s+$', '', texto_tweets)
head(texto_tweets)
head(texto_tweets)
cat("Eliminamos retweet\n\n")
texto_tweets = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
head(texto_tweets)
cat("Eliminar usuarios\n\n")
texto_tweets = gsub('@\\w+', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos puntuación\n\n")
texto_tweets = gsub('[[:punct:]]', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos números\n\n")
texto_tweets = gsub('[[:digit:]]', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos enlaces html\n\n")
texto_tweets = gsub('http\\w+', '', texto_tweets)
head(texto_tweets)
cat("Eliminamos espacios innecesarios\n\n")
texto_tweets = gsub('[ \t]{2,}', '', texto_tweets)
texto_tweets = gsub('^\\s+|\\s+$', '', texto_tweets)
head(texto_tweets)
#Función para eliminar posibles errores al pasar a minúscula
try.error = function(x){
# creamos un missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not un error
if (!inherits(try_error, 'error'))
y = tolower(x)
return(y)
}
cat("Pasamos a minúsucla si no hay error\n\n")
texto_tweets = sapply(texto_tweets, try.error)
head(texto_tweets)
cat("eliminamos NAs en el texto\n\n")
texto_tweets = texto_tweets[!is.na(texto_tweets)]
names(texto_tweets) = NULL
head(texto_tweets)
head(texto_tweets)
cat("\nEliminamos retweet\n\n")
texto_tweets = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
head(texto_tweets)
cat("\nEliminar usuarios\n\n")
texto_tweets = gsub('@\\w+', '', texto_tweets)
head(texto_tweets)
cat("\nEliminamos puntuación\n\n")
texto_tweets = gsub('[[:punct:]]', '', texto_tweets)
head(texto_tweets)
cat("\nEliminamos números\n\n")
texto_tweets = gsub('[[:digit:]]', '', texto_tweets)
head(texto_tweets)
cat("\nEliminamos enlaces html\n\n")
texto_tweets = gsub('http\\w+', '', texto_tweets)
head(texto_tweets)
cat("\nEliminamos espacios innecesarios\n\n")
texto_tweets = gsub('[ \t]{2,}', '', texto_tweets)
texto_tweets = gsub('^\\s+|\\s+$', '', texto_tweets)
head(texto_tweets)
#Función para eliminar posibles errores al pasar a minúscula
try.error = function(x){
# creamos un missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not un error
if (!inherits(try_error, 'error'))
y = tolower(x)
return(y)
}
cat("\nPasamos a minúsucla si no hay error\n\n")
texto_tweets = sapply(texto_tweets, try.error)
head(texto_tweets)
cat("\nEliminamos NAs en el texto\n\n")
texto_tweets = texto_tweets[!is.na(texto_tweets)]
names(texto_tweets) = NULL
head(texto_tweets)
knitr::opts_chunk$set(echo = TRUE)
# Cargar la librería específica de TwitterR
library(twitteR);
# Leer el fichero de credenciales creado anteriormente, ¡cuidado con la ruta del fichero!.
source('../credenciales.R')
# Función que permite buscar: #hastag, @usuarios, palabras
tweets <- searchTwitter("#brexit", n=100, lang="en")
# Quedarse solo con el primer tweet para datos concretos del mismo
tweet <- tweets[[1]];
# Mostrar la estructura del tweet
#str(tweet)
# Obtener el texto del tweet:
tweet$getText()
# Obtener información acerca del usuario:
usuario <- getUser(tweet$getScreenName());
# Mostrar la estructura del usuario
#str(usuario)
# Obtener el nombre del usuario
usuario$getName()
tweets <- searchTwitter("#brexit", n=100, lang="en")
texto_tweets = sapply(tweets, function(x) x$getText())
head(texto_tweets)
cat("\nEliminamos retweet\n")
texto_tweets = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', texto_tweets)
head(texto_tweets)
cat("\nEliminar usuarios\n")
texto_tweets = gsub('@\\w+', '', texto_tweets)
head(texto_tweets)
cat("\nEliminamos puntuación\n")
texto_tweets = gsub('[[:punct:]]', '', texto_tweets)
head(texto_tweets)
cat("\nEliminamos números\n")
texto_tweets = gsub('[[:digit:]]', '', texto_tweets)
head(texto_tweets)
cat("\nEliminamos enlaces html\n")
texto_tweets = gsub('http\\w+', '', texto_tweets)
head(texto_tweets)
cat("\nEliminamos espacios innecesarios\n")
texto_tweets = gsub('[ \t]{2,}', '', texto_tweets)
texto_tweets = gsub('^\\s+|\\s+$', '', texto_tweets)
head(texto_tweets)
#Función para eliminar posibles errores al pasar a minúscula
try.error = function(x){
# creamos un missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not un error
if (!inherits(try_error, 'error'))
y = tolower(x)
return(y)
}
cat("\nPasamos a minúsucla si no hay error\n")
texto_tweets = sapply(texto_tweets, try.error)
head(texto_tweets)
cat("\nEliminamos NAs en el texto\n")
texto_tweets = texto_tweets[!is.na(texto_tweets)]
names(texto_tweets) = NULL
head(texto_tweets)
